esphome:
  name: atom-qrcode-scanner
  on_boot:
    priority: -100
    then:
      - delay: 2s
      - logger.log: "Initializing scanner..."
      # Set to RS232 mode (UART)
      - uart.write:
          id: uart_bus
          data: [0x21, 0x42, 0x40, 0x00]
      - delay: 200ms
      # Set to manual trigger mode
      - uart.write:
          id: uart_bus
          data: [0x21, 0x61, 0x41, 0x00]
      - delay: 200ms
      # Enable all barcodes
      - uart.write:
          id: uart_bus
          data: [0x32, 0x76, 0x42, 0x03]
      - delay: 200ms
      # Enable beeper
      - uart.write:
          id: uart_bus
          data: [0x21, 0x63, 0x46, 0x01]
      - delay: 200ms
      - logger.log: "Scanner initialization complete"

esp32:
  board: m5stack-atom
  framework:
    type: arduino

# Enable logging
logger:
  level: DEBUG
  baud_rate: 0

# Enable Home Assistant API
api:


ota:
  platform: esphome


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${device_name} Hotspot"
    password: "12345678"

captive_portal:


# Include the custom component
external_components:
  - source:
      type: local
      path: custom_components

# UART configuration
uart:
  id: uart_bus
  baud_rate: 115200
  data_bits: 8
  parity: NONE
  stop_bits: 1
  tx_pin: GPIO19
  rx_pin: GPIO22
  rx_buffer_size: 1024

# Button for scanning
binary_sensor:
  - platform: gpio
    pin: 
      number: GPIO39
      inverted: true
    name: "Atom Button"
    id: atom_button
    on_press:
      then:
        - logger.log: "Button pressed - triggering scan"
        - uart.write:
            id: uart_bus
            data: [0x32, 0x75, 0x01]  # Start decode
        - delay: 3s
        - uart.write:
            id: uart_bus
            data: [0x32, 0x75, 0x02]  # Stop decode

# LED indicator
light:
  - platform: binary
    name: "Scanner LED"
    output: scanner_led
    id: led_indicator

output:
  - platform: gpio
    pin: GPIO33
    id: scanner_led

# Text sensor with simple filtering
text_sensor:
  - platform: uart_readline
    uart_id: uart_bus
    name: "Barcode Scanner"
    id: barcode_scanner
    icon: "mdi:barcode-scan"
    filters:
      # Simple filter to remove unwanted single characters
      - lambda: |-
          // Ignore single 'u' from stop command
          if (x == "u" || x == "u\x02" || x == "u\x02\x00" || x == "u\x02\x00\x00") {
            return {};
          }
          // Ignore initialization echoes
          if (x == "B@" || x == "aA" || x == "vB" || x == "cF" || x == "@" || x == "A" || x == "B" || x == "F") {
            return {};
          }
          // Ignore protocol responses that start with these bytes
          if (x.length() > 0 && (x[0] == '"' || x[0] == '$' || x[0] == '3' || x[0] == 'D')) {
            return {};
          }
          // Only accept strings with at least 3 characters (real barcodes)
          if (x.length() < 3) {
            return {};
          }
          return x;
    on_value:
      then:
        - logger.log:
            format: "Barcode scanned: %s"
            args: ['x.c_str()']
        - light.turn_on: 
            id: led_indicator
        - delay: 500ms
        - light.turn_off: led_indicator

sensor:
  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 60s

button:
  - platform: template
    name: "Test Manual Scan"
    on_press:
      - uart.write:
          id: uart_bus
          data: [0x32, 0x75, 0x01]
      - delay: 2s
      - uart.write:
          id: uart_bus
          data: [0x32, 0x75, 0x02]